spring:
  cache:
    type: redis
  redis:
    host: localhost

    port: ${REDIS_PORT}
  application:
    name: Restaurant_Service
  datasource:
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    url: ${SPRING_DATASOURCE_URL}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 30000  # Таймаут для простоящих соединений (мс)
      connection-timeout: 20000 # Таймаут для подключения (мс)
      max-lifetime: 1800000 # Максимальное время жизни соединения (мс)
  jpa:
    show-sql: ${SPRING_JPA_SHOW_SQL}
    properties:
      hibernate:
        connection:
          release_mode: after_transaction
        show_sql: ${SPRING_JPA_PROPERTIES_HIBERNATE_SHOW_SQL}
        jdbc:
          batch_size: 20
          batch_versioned_data: true
        order_updates: ${SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_UPDATES}
        generate_statistics: ${SPRING_JPA_PROPERTIES_HIBERNATE_GENERATE_STATISTICS}
        format_sql: true


  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: 5672
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}
  flyway:
    enabled: ${SPRING_FLYWAY_ENABLED}
    locations: ${SPRING_FLYWAY_LOCATIONS}
    baseline-on-migrate: ${SPRING_FLYWAY_BASELINE_ON_MIGRATE}
    schemas: ${SPRING_FLYWAY_SCHEMAS}
    clean-disabled: false
  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 20MB
      enabled: true

rabbitmq:
  queues:
    json:
      queue1:
        name: json_user_registration_queue
        routingKey: json_user_registration_routing_key
      queue2:
        name: json_product_save_queue
        routingKey: json_product_save_routing_key
  exchanges:
    exchange:
      name: java_exchange

server:
  port: ${SERVER_PORT}

jwt:
  access: ${JWT_ACCESS}

#logging:
#  level:
##     Логирование WebSocket
#    org.springframework.web.socket: DEBUG
#    org.springframework.messaging: DEBUG
#    org.springframework.web.socket.messaging: DEBUG
#    # Логирование ошибок Tomcat (если используется встроенный Tomcat)
#    org.springframework.boot.web.embedded.tomcat: DEBUG

bot:
  name:
    ${BOT_NAME}
  key:
    ${BOT_KEY}

scheduler:
  cron:
    0 0 12 * * ?
  enabled: true

management:
  endpoints:
    web:
      exposure:
        include: health,prometheus

  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true

aws:
  java:
    v1:
      disableDeprecationAnnouncement: false
  accessKey: ${AWS_ACCESS_KEY}
  secretAccessKey: ${AWS_SECRET_ACCESS_KEY}
  bucketName: ${AWS_BUCKET_NAME}