package org.test.restaurant_service.telegram.util;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.test.restaurant_service.entity.Otp;
import org.test.restaurant_service.service.impl.OtpServiceImpl;
import org.test.restaurant_service.telegram.config.BotConfig;

import java.security.SecureRandom;
import java.util.ArrayList;

@Slf4j
@Component
public class TelegramBot extends TelegramLongPollingBot {

    private final OtpServiceImpl otpService;


    private final String helpText = "\uD83D\uDCDA –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n" +
            "/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n" +
            "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ\n" +
            "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n" +
            "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é";

    private final String menuText = "\uD83C\uDF74 –ù–∞—à–µ –º–µ–Ω—é:\n" +
            "1. –°–∞–ª–∞—Ç—ã\n" +
            "2. –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞\n" +
            "3. –î–µ—Å–µ—Ä—Ç—ã\n" +
            "4. –ù–∞–ø–∏—Ç–∫–∏\n\n" +
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!";


    private final BotConfig botConfig;
    private final SecureRandom random = new SecureRandom();

    public TelegramBot(OtpServiceImpl otpService, BotConfig botConfig) {
        this.otpService = otpService;

        this.botConfig = botConfig;
        ArrayList<BotCommand> botCommands = new ArrayList<>();
        botCommands.add(new BotCommand("/start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"));
        botCommands.add(new BotCommand("/help", "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"));
        botCommands.add(new BotCommand("/register", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"));
        botCommands.add(new BotCommand("/info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"));
        botCommands.add(new BotCommand("/menu", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"));


        try {
            this.execute(new SetMyCommands(botCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            log.error(e.getMessage());
        }
    }

    @Override
    public String getBotUsername() {
        String botName = botConfig.getBotName();
        log.debug("BOT NAME: {}", botName);
        return botName;
    }

    @Override
    public String getBotToken() {
        String botKey = botConfig.getBotKey();
        log.debug("BOT KEY: {}", botKey);
        return botKey;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();
            User user = update.getMessage().getFrom();
            String userName = user.getUserName();
            String firstName = user.getFirstName();
            String lastName = user.getLastName();
            log.info("USER: {}, {}, {}", userName, firstName, lastName);

            switch (text) {
                case "/start":
                    sendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω ARNAUT's! –í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å.");
                    break;
                case "/help":
                    sendHelpMessage(chatId);
                    break;
                case "/register":
                    register(chatId, user);
                    break;
                case "/info":
                    sendMessage(chatId, "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö ARNAUT's!");
                    break;
                case "/menu":
                    sendMenu(chatId);
                    break;
                default:
                    sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.");
                    break;
            }
        }
    }

    private void sendHelpMessage(Long chatId) {

        sendMessage(chatId, helpText);
    }

    private void sendMenu(Long chatId) {

        sendMessage(chatId, menuText);
    }

    private void register(Long chatId, User user) {

        Otp otp = otpService.generateAndSaveOtp(chatId, user);

        String message = "üéâ –í–∞—à –∫–æ–¥: `" + otp.getOtpCode() + "` üéâ\n" +
                "üîí –ù–∏–∫–æ–º—É –Ω–µ –¥–∞–≤–∞–π—Ç–µ –µ–≥–æ.\n" +
                "üåê –ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –∫–æ–¥–∞!\n" +
                "üéÅ –í—ã —Å–º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö, –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å–∞–º—ã–º–∏ –ø–µ—Ä–≤—ã–º–∏!";

        sendMessageWithMarkdown(chatId, message);
    }


    private void sendMessageWithMarkdown(Long chatId, String message) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId.toString());
        sendMessage.setText(message);
        sendMessage.setParseMode("Markdown"); // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }


}
