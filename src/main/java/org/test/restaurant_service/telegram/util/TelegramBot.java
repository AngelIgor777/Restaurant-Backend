package org.test.restaurant_service.telegram.util;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendSticker;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.test.restaurant_service.dto.response.ProductResponseDTO;
import org.test.restaurant_service.dto.response.ProductTypeResponseDTO;
import org.test.restaurant_service.entity.Otp;
import org.test.restaurant_service.service.impl.OtpServiceImpl;
import org.test.restaurant_service.service.impl.ProductServiceImpl;
import org.test.restaurant_service.service.impl.ProductTypeServiceImpl;
import org.test.restaurant_service.telegram.config.BotConfig;

import javax.persistence.EntityNotFoundException;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@Component
public class TelegramBot extends TelegramLongPollingBot {

    private final OtpServiceImpl otpService;
    private final ProductTypeServiceImpl productTypeService;
    private final ProductServiceImpl productService;


    private final String BUTTON_BACK_TO_MENU = "BACK_TO_MENU";

    private final String helpText = "\uD83D\uDCDA –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n" +
            "/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n" +
            "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ\n" +
            "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n" +
            "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é";


    private final BotConfig botConfig;
    private final ProductServiceImpl productServiceImpl;
    private List<String> callbackProductTypesData = new ArrayList<>();
    private List<String> callbackProductsData = new ArrayList<>();


    public TelegramBot(OtpServiceImpl otpService, ProductTypeServiceImpl productTypeService, ProductServiceImpl productService, BotConfig botConfig, ProductServiceImpl productServiceImpl) {
        this.otpService = otpService;
        this.productTypeService = productTypeService;
        this.productService = productService;

        this.botConfig = botConfig;
        ArrayList<BotCommand> botCommands = new ArrayList<>();
        botCommands.add(new BotCommand("/start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"));
        botCommands.add(new BotCommand("/help", "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"));
        botCommands.add(new BotCommand("/register", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"));
        botCommands.add(new BotCommand("/info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"));
        botCommands.add(new BotCommand("/menu", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"));


        try {
            this.execute(new SetMyCommands(botCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            log.error(e.getMessage());
        }
        this.productServiceImpl = productServiceImpl;
    }

    @Override
    public String getBotUsername() {
        String botName = botConfig.getBotName();
        log.debug("BOT NAME: {}", botName);

        return botName;
    }

    @Override
    public String getBotToken() {
        String botKey = botConfig.getBotKey();
        log.debug("BOT KEY: {}", botKey);
        return botKey;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText();


            switch (text) {
                case "/start":
                    startRegister(update);
                    break;
                case "/help":
                    sendHelpMessage(update);
                    break;
                case "/register":
                    registerOtpCode(update);
                    break;
                case "/info":
                    sendMessage(update, "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö ARNAUT's! ‚òÄ");
                    break;
                case "/menu":
                    menu(update);
                    break;
                default:
                    sendMessage(update, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ü§Ø. –í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.");
                    break;
            }
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update);

        } else if (update.getMessage().hasSticker()) {
            stickerHandler(update);
        }
    }


    private void handleCallbackQuery(Update update) {
        CallbackQuery callbackQuery = update.getCallbackQuery();
        String data = callbackQuery.getData();

        boolean anyMatchProductTypes = callbackProductTypesData.stream()
                .anyMatch(callbackItem -> callbackItem.equals(data));
        boolean anyMatchProducts = callbackProductsData.stream()
                .anyMatch(callbackItem -> callbackItem.equals(data));


        if (anyMatchProductTypes) {
            handleProductTypeCallback(callbackQuery, data);
        }
        if (anyMatchProducts) {
            setToProduct(update, data);

        } else if (data.equals(BUTTON_BACK_TO_MENU)) {
            backToMenu(update);
        }
    }

    private void setToProduct(Update update, String product) {
        ProductResponseDTO productResponse = productServiceImpl.getByName(product);
        StringBuilder productText = getProductText(productResponse);
        EditMessageText editMessageText = setEditMessageTextProperties(update);

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();
        List<InlineKeyboardButton> inlineKeyboardButtons = new ArrayList<>();

        editMessageText.setText(productText.toString());

        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();


        inlineKeyboardButton.setText("–ù–∞–∑–∞–¥");
        inlineKeyboardButton.setCallbackData(productResponse.getTypeName());

        inlineKeyboardButtons.add(inlineKeyboardButton);
        rowsInLine.add(inlineKeyboardButtons);
        markupInLine.setKeyboard(rowsInLine);

        editMessageText.setReplyMarkup(markupInLine);
        executeMessage(editMessageText);
    }


    private StringBuilder getProductText(ProductResponseDTO productResponse) {
        StringBuilder productText = new StringBuilder();

        productText.append("–ë–ª—é–¥–æ: ").append(productResponse.getName()).append("\n");
        productText.append("–û–ø–∏—Å–∞–Ω–∏–µ: ").append(productResponse.getDescription()).append("\n");
        productText.append("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ").append(productResponse.getTypeName()).append("\n");
        productText.append("–°—Ç–æ–∏–º–æ—Å—Ç—å: ").append(productResponse.getPrice()).append(" mdl \n");
        LocalTime cookingTime = productResponse.getCookingTime();
        if (cookingTime == null) {
            productText.append("–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ").append("–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ ‚ò∫").append("\n");

        } else {
            productText.append("–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ").append(cookingTime.getMinute()).append(" –º–∏–Ω—É—Ç \n");
        }

        return productText;
    }

    private EditMessageText setEditMessageTextProperties(Update update) {
        CallbackQuery callbackQuery = update.getCallbackQuery();
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();

        EditMessageText editMessage = new EditMessageText();
        editMessage.setChatId(String.valueOf(chatId));
        editMessage.setText(menuText.toString());
        editMessage.setMessageId((int) messageId);

        return editMessage;
    }


    private void backToMenu(Update update) {

        EditMessageText editMessage = setEditMessageTextProperties(update);
        InlineKeyboardMarkup menuInlineMarkup = getMenuInlineMarkup();
        editMessage.setText(menuText.toString());
        editMessage.setReplyMarkup(menuInlineMarkup);
        executeMessage(editMessage);
        deleteMenuText();
    }

    private void handleProductTypeCallback(CallbackQuery callbackQuery, String productType) {
        List<ProductResponseDTO> products = productService.getByTypeName(productType); // TODO: Implement representation of all products in Telegram buttons

        Message message = callbackQuery.getMessage();
        Integer messageId = message.getMessageId();
        Long chatId = message.getChatId();

        String responseText = "–ù–∞—à–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + productType + " üòã:";
        editMessageProductsByType(responseText, chatId, messageId, products);
    }


    private void editMessageProductsByType(String text, long chatId, long messageId, List<ProductResponseDTO> products) {
        EditMessageText message = new EditMessageText();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setMessageId((int) messageId);


        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();

        int size = products.size();
        int rows = (int) Math.ceil((double) size / 2);


        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
        for (int i = 0; i < rows; i++) {
            List<InlineKeyboardButton> row = new ArrayList<>();

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
            int limitation = Math.min((i + 2) * 2, size);
            for (int x = i * 3; x < limitation; x++) {
                InlineKeyboardButton button = createButton();
                String callbackData = products.get(x).getName();
                button.setText(callbackData);
                button.setCallbackData(callbackData);
                callbackProductsData.add(callbackData);
                row.add(button);
            }
            rowsInLine.add(row);
        }

        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);


        addBackToMenuButton(rowsInLine);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error(e.getMessage());
        }
    }

    private void addBackToMenuButton(List<List<InlineKeyboardButton>> rowsInLine) {
        List<InlineKeyboardButton> row = new ArrayList<>();

        InlineKeyboardButton button = createButton();
        button.setText("–ù–∞–∑–∞–¥ ü•û");
        button.setCallbackData(BUTTON_BACK_TO_MENU);
        row.add(button);
        rowsInLine.add(row);
    }


    private final StringBuilder menuText = new StringBuilder();

    private List<String> setMenuText() {
        List<String> productTypes = productTypeService.getAll().stream()
                .map(ProductTypeResponseDTO::getName).toList();
        int size = productTypes.size();
        menuText.append("\uD83C\uDF74 –ù–∞—à–µ –º–µ–Ω—é:\n\n");

        for (int i = 1; i < size; i++) {
            menuText.append(i).append(".").append(productTypes.get(i)).append("\n");
        }

        menuText.append("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!\n");
        return productTypes;
    }


    private void menu(Update update) {
        setMenuText();
        SendMessage message = new SendMessage(update.getMessage().getChatId().toString(), menuText.toString());
        createMenu(message);
    }

    private void createMenu(SendMessage message) {
        InlineKeyboardMarkup menuInlineMarkup = getMenuInlineMarkup();
        message.setReplyMarkup(menuInlineMarkup);
        executeMessage(message);
        deleteMenuText();
    }

    //–Ω—É–∂–Ω–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ menu
    private void deleteMenuText() {
        menuText.delete(0, menuText.length());
    }

    private InlineKeyboardMarkup getMenuInlineMarkup() {

        List<String> productTypes = setMenuText();

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();

        int size = productTypes.size();
        int rows = (int) Math.ceil((double) size / 2); // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç—Ä–æ–∫

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
        for (int i = 0; i < rows; i++) {
            List<InlineKeyboardButton> row = new ArrayList<>();

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
            int limitation = Math.min((i + 1) * 2, size);
            for (int x = i * 2; x < limitation; x++) {
                InlineKeyboardButton button = createButton();
                String callbackData = productTypes.get(x);
                button.setText(callbackData);
                button.setCallbackData(callbackData);
                callbackProductTypesData.add(callbackData);
                row.add(button);
            }
            rowsInLine.add(row);
        }

        markupInLine.setKeyboard(rowsInLine);
        return markupInLine;
    }

    private InlineKeyboardButton createButton() {
        return new InlineKeyboardButton();
    }


    private void executeMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error(e.getMessage());
        }
    }

    private void executeMessage(EditMessageText message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error(e.getMessage());
        }
    }


    private void stickerHandler(Update update) {
        String fileId = update.getMessage().getSticker().getFileId();
        sendMessage(update, "–ö–∞–∫–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä! üôÉ");
        log.info("–ü–æ–ª—É—á–µ–Ω File ID —Å—Ç–∏–∫–µ—Ä–∞: {}", fileId);
    }

    private void sendHelpMessage(Update update) {

        sendMessage(update, helpText);
    }

    private void sendMenu(Update up) {

        sendMessage(up, menuText.toString());
    }

    private void startRegister(Update update) {
        Long chatId = update.getMessage().getChatId();
        User user = update.getMessage().getFrom();

        if (!otpService.existByChatId(chatId)) {
            sendSticker(chatId, "CAACAgIAAxkBAAOIZ2wCV5OzULOMka95E5_NGb48DX8AAocQAALddzlI382554aYWfM2BA");
            sendMessage(update, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ARNAUT's! ‚ò∫ \n" +
                    "–í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å.");
            otpService.save(chatId, user);
        } else {
            sendMessage(update, "–û–π, –≤—ã—à–ª–∞ –æ—à–∏–±–æ—á–∫–∞ üòÖ.\n" +
                    "–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ üòΩ.\n" +
                    "–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å. üòå");
        }
    }

    private void registerOtpCode(Update update) {
        Long chatId = update.getMessage().getChatId();
        if (otpService.existByChatId(chatId)) {
            sendSticker(chatId, "CAACAgIAAxkBAAOMZ2wCg2GLi8plYN0NGFsVl2NfnMYAAgsBAAL3AsgPxfQ7mJWqcds2BA");
            try {
                Otp otp = otpService.generateAndSaveOtp(chatId);

                String message = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π —Å–µ–º—å–∏!\n" +
                        "üéâ –í–∞—à –∫–æ–¥: `" + otp.getOtpCode() + "` üéâ\n" +
                        "üîí –ù–∏–∫–æ–º—É –Ω–µ –¥–∞–≤–∞–π—Ç–µ –µ–≥–æ.\n" +
                        "üåê –ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –∫–æ–¥–∞!\n" +
                        "üéÅ –í—ã —Å–º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö, –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å–∞–º—ã–º–∏ –ø–µ—Ä–≤—ã–º–∏!";

                sendMessageWithMarkdown(chatId, message);
            } catch (EntityNotFoundException e) {
                sendMessage(update, "–û–π, –≤—ã—à–ª–∞ –æ—à–∏–±–æ—á–∫–∞ üòÖ.\n" +
                        "–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ.\n" +
                        "–í–≤–µ–¥–∏—Ç–µ /me —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üòå");
            }
        }
    }


    private void sendMessageWithMarkdown(Long chatId, String message) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId.toString());
        sendMessage.setText(message);
        sendMessage.setParseMode("Markdown"); // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }


    private void sendSticker(Long chatId, String stickerFileId) {
        SendSticker sendSticker = new SendSticker();
        sendSticker.setChatId(chatId.toString());
        sendSticker.setSticker(new InputFile(stickerFileId)); // –ò—Å–ø–æ–ª—å–∑—É–µ–º File ID —Å—Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ URL

        try {
            execute(sendSticker);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {}", e.getMessage());
        }
    }


    private void sendMessage(Update update, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(update.getMessage().getChatId().toString());
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }


}
