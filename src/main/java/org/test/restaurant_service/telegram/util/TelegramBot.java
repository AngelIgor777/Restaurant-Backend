package org.test.restaurant_service.telegram.util;

import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.Resource;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.send.SendSticker;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.test.restaurant_service.dto.request.UserRegistrationDTO;
import org.test.restaurant_service.dto.response.ProductResponseDTO;
import org.test.restaurant_service.dto.response.ProductTypeResponseDTO;
import org.test.restaurant_service.entity.TelegramUserEntity;
import org.test.restaurant_service.rabbitmq.producer.RabbitMQJsonProducer;
import org.test.restaurant_service.service.PhotoService;
import org.test.restaurant_service.service.impl.TelegramUserServiceImpl;
import org.test.restaurant_service.service.impl.PhotoServiceImpl;
import org.test.restaurant_service.service.impl.ProductServiceImpl;
import org.test.restaurant_service.service.impl.ProductTypeServiceImpl;
import org.test.restaurant_service.telegram.config.BotConfig;

import javax.persistence.EntityNotFoundException;
import java.io.File;
import java.io.IOException;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@Component
@EnableScheduling
public class TelegramBot extends TelegramLongPollingBot {

    private final TelegramUserServiceImpl telegramUserService;
    private final ProductTypeServiceImpl productTypeService;
    private final ProductServiceImpl productService;
    private final RabbitMQJsonProducer rabbitMQJsonProducer;
    private final PhotoService photoService;

    private final String BUTTON_BACK_TO_MENU = "BACK_TO_MENU";

    private final String helpText =
            "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n" +
                    "üöÄ /start - <i>–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞</i>\n" +
                    "‚ùì /help - <i>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥</i>\n" +
                    "‚ÑπÔ∏è /info - <i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</i>\n" +
                    "üçΩÔ∏è /menu - <i>–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é</i>\n\n" +
                    "‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–æ–ª–µ–µ —Ä–∞–¥–æ—Å—Ç–Ω—ã–º!";
    private final String infoText =
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n" +
                    "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à—É –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ –∏ –ø—Ä–∏—è—Ç–Ω–µ–µ! üåü\n\n" +
                    "–° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n" +
                    "üìù –ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ\n" +
                    "üì¢ –ü–æ–ª—É—á–∞—Ç—å —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö ARNAUT's\n\n" +
                    "‚ú® –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –±—ã—Ç—å –≤–∞–º –ø–æ–ª–µ–∑–Ω—ã–º–∏!";
    private final BotConfig botConfig;

    private final ProductServiceImpl productServiceImpl;
    private final TelegramUserServiceImpl otpServiceImpl;
    private final PhotoServiceImpl photoServiceImpl;

    private List<String> callbackProductTypesData = new ArrayList<>();

    private List<String> callbackProductsData = new ArrayList<>();


    public TelegramBot(TelegramUserServiceImpl telegramUserService, ProductTypeServiceImpl productTypeService, ProductServiceImpl productService, RabbitMQJsonProducer rabbitMQJsonProducer, PhotoService photoService, BotConfig botConfig, ProductServiceImpl productServiceImpl, TelegramUserServiceImpl otpServiceImpl, PhotoServiceImpl photoServiceImpl) {
        this.telegramUserService = telegramUserService;
        this.productTypeService = productTypeService;
        this.productService = productService;
        this.rabbitMQJsonProducer = rabbitMQJsonProducer;
        this.photoService = photoService;

        this.botConfig = botConfig;
        ArrayList<BotCommand> botCommands = new ArrayList<>();
        botCommands.add(new BotCommand("/start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"));
        botCommands.add(new BotCommand("/help", "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"));
        botCommands.add(new BotCommand("/info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"));
        botCommands.add(new BotCommand("/menu", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"));


        try {
            this.execute(new SetMyCommands(botCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            log.error(e.getMessage());
        }
        this.productServiceImpl = productServiceImpl;
        this.otpServiceImpl = otpServiceImpl;
        this.photoServiceImpl = photoServiceImpl;
    }

    @Override
    public String getBotUsername() {
        String botName = botConfig.getBotName();
        return botName;
    }

    @Override
    public String getBotToken() {
        String botKey = botConfig.getBotKey();
        return botKey;

    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText();

            Long chatId = update.getMessage().getChatId();
            switch (text) {
                case "/start":
                    registerFull(update);
                    break;
                case "/help":
                    sendHelpMessage(update);
                    break;
                case "/info":
                    sendMessage(update, infoText);
                    break;
                case "/menu":
                    menu(update);
                    break;
                case "/website":
                    sendMessageWithMarkdown(chatId,
                            String.format("üåü –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à —Å–∞–π—Ç: [arnauts.md](https://arnauts.md/%s). –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üòä", chatId));
                    break;
                default:
                    sendMessageWithMarkdown(chatId, String.format("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ü§Ø. –í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.\n\n" +
                            "–ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–µ –º–µ–Ω—é /menu ‚ò∫ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ —É –Ω–∞—Å –Ω–∞ —Å–∞–π—Ç–µ [arnauts.md](https://arnauts.md/%s).", chatId));
                    break;
            }
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update);

        } else if (update.getMessage().hasSticker()) {
            stickerHandler(update);
        }
    }
//
//    @Scheduled(cron = "${cron.scheduler}")
//    private void sendAds() {
//        String adText =3333
//                "üçΩÔ∏è <b>–í—Ä–µ–º—è –≤–∫—É—Å–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π!</b>\n\n" +
//                        "‚ú® –°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å –¥–ª—è –≤–∞—Å –Ω–µ—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ:\n" +
//                        "üçï <b>–ü–∏—Ü—Ü–∞ –Ω–µ–¥–µ–ª–∏:</b> –°—ã—Ä–Ω—ã–π –≤–∑—Ä—ã–≤ ‚Äî —Ç–æ–ª—å–∫–æ 149 mdl!\n" +
//                        "üçπ <b>–ö–æ–∫—Ç–µ–π–ª–∏:</b> –ó–∞–∫–∞–∂–∏ –¥–≤–∞ –∏ –ø–æ–ª—É—á–∏ —Ç—Ä–µ—Ç–∏–π –≤ –ø–æ–¥–∞—Ä–æ–∫!\n\n" +
//                        "üéâ <i>–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å—Ç–æ–ª–∏–∫ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å —à–∞–Ω—Å –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –±–ª—é–¥–∞–º–∏!</i>\n\n" +
//                        "üì≤ –ù–∞–∂–º–∏—Ç–µ /menu, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë –º–µ–Ω—é!\n\n" +
//                        "‚ù§Ô∏è –° –ª—é–±–æ–≤—å—é, –≤–∞—à ARNAUT's!";
//
//        List<Otp> all = otpServiceImpl.getAll();
//        for (Otp otp : all) {
//            prepareAndSendMessage(otp.getChatId(), adText);
//        }
//    }

//    @Scheduled(cron = "${cron.scheduler}")
//    public void sendPhotoWithCaption() throws IOException {
//
//
//        SendPhoto photo = new SendPhoto();
//        Resource image = photoService.getImage("pizza.png");
//        File file = image.getFile();
//        photo.setPhoto(new InputFile(file));
//        photo.setParseMode("HTML");
//
//        List<TelegramUserEntity> all = otpServiceImpl.getAll();
//        for (TelegramUserEntity telegramUserEntity : all) {
//
//            photo.setCaption(String.format("%s –ü—Ä–∏–≤–µ—Ç! üòé –£ –Ω–∞—Å –¥–ª—è —Ç–µ–±—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ!\n\n" +
//                    "üçΩÔ∏è<b>–í—Ä–µ–º—è –≤–∫—É—Å–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π!</b>\n\n" +
//                    "‚ú® –°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å –¥–ª—è –≤–∞—Å –Ω–µ—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ:\n" +
//                    "üçï <b>–ü–∏—Ü—Ü–∞ –Ω–µ–¥–µ–ª–∏:</b> –°—ã—Ä–Ω—ã–π –≤–∑—Ä—ã–≤ ‚Äî —Ç–æ–ª—å–∫–æ 149 –ª–µ–π!\n" +
//                    "üéâ <i>–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å—Ç–æ–ª–∏–∫ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å —à–∞–Ω—Å –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –±–ª—é–¥–∞–º–∏!</i>\n\n" +
//                    "üì≤ –ù–∞–∂–º–∏—Ç–µ /menu, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë –º–µ–Ω—é!\n\n" +
//                    "‚ù§Ô∏è –° –ª—é–±–æ–≤—å—é, –≤–∞—à ARNAUTS!", telegramUserEntity.getFirstname()));
//            try {
//                photo.setChatId(telegramUserEntity.getChatId().toString());
//                execute(photo);
//            } catch (TelegramApiException e) {
//                e.printStackTrace();
//            }
//        }
//    }

    private void prepareAndSendMessage(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setParseMode("HTML");
        message.setText(textToSend);
        executeMessage(message);
    }

    private void handleCallbackQuery(Update update) {
        CallbackQuery callbackQuery = update.getCallbackQuery();
        String data = callbackQuery.getData();

        boolean anyMatchProductTypes = callbackProductTypesData.stream()
                .anyMatch(callbackItem -> callbackItem.equals(data));
        boolean anyMatchProducts = callbackProductsData.stream()
                .anyMatch(callbackItem -> callbackItem.equals(data));


        if (anyMatchProductTypes) {
            handleProductTypeCallback(callbackQuery, data);
        }
        if (anyMatchProducts) {
            setToProduct(update, data);

        } else if (data.equals(BUTTON_BACK_TO_MENU)) {
            backToMenu(update);
        }
    }

    public void setToProduct(Update update, String product) {
        ProductResponseDTO productResponse = productServiceImpl.getByName(product);
        StringBuilder productText = getProductText(productResponse);
        EditMessageText editMessage = setEditMessageTextProperties(update);
        editMessage.setParseMode("HTML");

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();
        List<InlineKeyboardButton> inlineKeyboardButtons = new ArrayList<>();

        editMessage.setText(productText.toString());

        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();

        inlineKeyboardButton.setText("–ù–∞–∑–∞–¥ ‚ú®");
        inlineKeyboardButton.setCallbackData(productResponse.getTypeName());

        inlineKeyboardButtons.add(inlineKeyboardButton);
        rowsInLine.add(inlineKeyboardButtons);
        markupInLine.setKeyboard(rowsInLine);

        editMessage.setReplyMarkup(markupInLine);
        executeMessage(editMessage);
    }


    private StringBuilder getProductText(ProductResponseDTO productResponse) {
        StringBuilder productText = new StringBuilder();

        productText.append("üç¥ <b>–ë–ª—é–¥–æ:</b> ").append(productResponse.getName()).append("\n");
        productText.append("‚ú® <i>–û–ø–∏—Å–∞–Ω–∏–µ:</i> ").append(productResponse.getDescription()).append("\n");
        productText.append("üìÇ <i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</i> ").append(productResponse.getTypeName()).append("\n");
        productText.append("üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ").append(productResponse.getPrice()).append(" –ª–µ–π\n");
        LocalTime cookingTime = productResponse.getCookingTime();
        if (cookingTime != null) {
            productText.append("‚è±Ô∏è <b>–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b> ").append(cookingTime.getMinute()).append(" –º–∏–Ω—É—Ç\n");
        }

        productText.append("\nüçΩÔ∏è –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º –≤–∫—É—Å–æ–º –∏ —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π! ‚ù§Ô∏è");
        return productText;
    }

    private EditMessageText setEditMessageTextProperties(Update update) {
        CallbackQuery callbackQuery = update.getCallbackQuery();
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();

        EditMessageText editMessage = new EditMessageText();
        editMessage.setChatId(String.valueOf(chatId));
        editMessage.setText(menuText.toString());
        editMessage.setMessageId((int) messageId);
        editMessage.setParseMode("HTML");

        return editMessage;
    }


    private void backToMenu(Update update) {

        EditMessageText editMessage = setEditMessageTextProperties(update);
        InlineKeyboardMarkup menuInlineMarkup = getMenuInlineMarkup();
        editMessage.setText(menuText.toString());
        editMessage.setReplyMarkup(menuInlineMarkup);
        executeMessage(editMessage);
        deleteMenuText();
    }

    private void handleProductTypeCallback(CallbackQuery callbackQuery, String productType) {
        List<ProductResponseDTO> products = productService.getByTypeName(productType); // TODO: Implement representation of all products in Telegram buttons

        Message message = callbackQuery.getMessage();
        Integer messageId = message.getMessageId();
        Long chatId = message.getChatId();

        String responseText = "üçΩÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>" + productType + "</b>!\n\n" +
                "–ú–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –±–ª—é–¥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n"
                + "–í–æ—Ç, —á—Ç–æ –º—ã —Å –ª—é–±–æ–≤—å—é –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å üòã:\n";

        editMessageProductsByType(responseText, chatId, messageId, products);
    }

    private void editMessageProductsByType(String text, long chatId, long messageId, List<ProductResponseDTO> products) {
        EditMessageText message = new EditMessageText();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setMessageId((int) messageId);
        message.setParseMode("HTML");


        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();

        int size = products.size();
        int rows = (int) Math.ceil((double) size / 2);


        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
        for (int i = 0; i < rows; i++) {
            List<InlineKeyboardButton> row = new ArrayList<>();

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
            int limitation = Math.min((i + 2) * 2, size);
            for (int x = i * 3; x < limitation; x++) {
                InlineKeyboardButton button = createButton();
                String callbackData = products.get(x).getName();
                button.setText(callbackData);
                button.setCallbackData(callbackData);
                callbackProductsData.add(callbackData);
                row.add(button);
            }
            rowsInLine.add(row);
        }

        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);


        addBackToMenuButton(rowsInLine);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error(e.getMessage());
        }
    }

    private void addBackToMenuButton(List<List<InlineKeyboardButton>> rowsInLine) {
        List<InlineKeyboardButton> row = new ArrayList<>();

        InlineKeyboardButton button = createButton();
        button.setText("–ù–∞–∑–∞–¥ ‚ú®");
        button.setCallbackData(BUTTON_BACK_TO_MENU);
        row.add(button);
        rowsInLine.add(row);
    }


    private final StringBuilder menuText = new StringBuilder();

    private List<String> setMenuText() {
        List<String> productTypes = productTypeService.getAll().stream()
                .map(ProductTypeResponseDTO::getName).toList();

        menuText.append("üçΩÔ∏è <i><b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —É—é—Ç–Ω–æ–µ –º–µ–Ω—é!</b></i> \n\n")
                .append("‚ú® –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–∞—Ä—è—Ç –≤–∞–º –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ –∏ —Ä–∞–¥–æ—Å—Ç—å! ‚ú®\n\n");

        for (int i = 1; i <= productTypes.size(); i++) {
            menuText.append("\uD83D\uDD38 <b>")
                    .append(i).append(". ")
                    .append(productTypes.get(i - 1))
                    .append("</b> \n")
                    .append("   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"); // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        }

        menuText.append("\nüíå –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å! –í–∞—à –≤–∫—É—Å ‚Äî –Ω–∞—à–∞ –∑–∞–±–æ—Ç–∞! üíå\n")
                .append("üéâ <i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ!</i> üéâ\n");
        return productTypes;
    }

    private void menu(Update update) {
        setMenuText();
        SendMessage message = new SendMessage(update.getMessage().getChatId().toString(), menuText.toString());
        message.setParseMode("HTML");
        createMenu(message);
    }

    private void createMenu(SendMessage message) {
        InlineKeyboardMarkup menuInlineMarkup = getMenuInlineMarkup();
        message.setReplyMarkup(menuInlineMarkup);
        executeMessage(message);
        deleteMenuText();
    }

    //–Ω—É–∂–Ω–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ menu
    private void deleteMenuText() {
        menuText.delete(0, menuText.length());
    }

    private InlineKeyboardMarkup getMenuInlineMarkup() {

        List<String> productTypes = setMenuText();

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();

        int size = productTypes.size();
        int rows = (int) Math.ceil((double) size / 2); // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç—Ä–æ–∫

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
        for (int i = 0; i < rows; i++) {
            List<InlineKeyboardButton> row = new ArrayList<>();

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
            int limitation = Math.min((i + 1) * 2, size);
            for (int x = i * 2; x < limitation; x++) {
                InlineKeyboardButton button = createButton();
                String callbackData = productTypes.get(x);
                button.setText("\uD83D\uDD38 " + callbackData);
                button.setCallbackData(callbackData);
                callbackProductTypesData.add(callbackData);
                row.add(button);
            }
            rowsInLine.add(row);
        }

        markupInLine.setKeyboard(rowsInLine);
        return markupInLine;
    }

    private InlineKeyboardButton createButton() {
        return new InlineKeyboardButton();
    }


    private void executeMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error(e.getMessage());
        }
    }

    private void executeMessage(EditMessageText message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error(e.getMessage());
        }
    }


    private void stickerHandler(Update update) {
        String fileId = update.getMessage().getSticker().getFileId();
        sendMessage(update, "–ö–∞–∫–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä! üôÉ");
        log.info("–ü–æ–ª—É—á–µ–Ω File ID —Å—Ç–∏–∫–µ—Ä–∞: {}", fileId);
    }

    private void sendHelpMessage(Update update) {

        sendMessage(update, helpText);
    }


    private void startRegister(Update update) {
        Long chatId = update.getMessage().getChatId();
        User user = update.getMessage().getFrom();
        UserRegistrationDTO userRegistrationDTO = new UserRegistrationDTO(chatId, user);

        if (!telegramUserService.existByChatId(chatId)) {
            rabbitMQJsonProducer.send(userRegistrationDTO);
            sendSticker(chatId, "CAACAgIAAxkBAAOIZ2wCV5OzULOMka95E5_NGb48DX8AAocQAALddzlI382554aYWfM2BA");
            sendMessage(update, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ARNAUT's! ‚ò∫ \n" +
                    "–í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å.");
        } else {
            sendMessage(update, "–û–π, –≤—ã—à–ª–∞ –æ—à–∏–±–æ—á–∫–∞ üòÖ.\n" +
                    "–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ üòΩ.\n" +
                    "–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å. üòå");
        }
    }

    private void registerFull(Update update) {

        Long chatId = update.getMessage().getChatId();

        String errorText = String.format(
                "üåê–ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç https://arnauts.md/%d.\n" +
                        "üéÅ–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö, –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏!", chatId);


        if (!telegramUserService.existByChatId(chatId)) {
            sendSticker(chatId, "CAACAgIAAxkBAAOMZ2wCg2GLi8plYN0NGFsVl2NfnMYAAgsBAAL3AsgPxfQ7mJWqcds2BA");
            try {
                telegramUserService.registerUser(update);

                String message = String.format("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π —Å–µ–º—å–∏!\n\n" +
                        "üåê–ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç https://arnauts.md/%d\n" +
                        "üéÅ–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö, –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏!", chatId);

                sendMessageWithMarkdown(chatId, message);
            } catch (EntityNotFoundException e) {
                sendMessage(update, errorText);
            }
        } else {

            sendMessage(update, errorText);
        }
    }


    private void sendMessageWithMarkdown(Long chatId, String message) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId.toString());
        sendMessage.setText(message);
        sendMessage.setParseMode("Markdown"); // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        executeMessage(sendMessage);
    }


    private void sendSticker(Long chatId, String stickerFileId) {
        SendSticker sendSticker = new SendSticker();
        sendSticker.setChatId(chatId.toString());
        sendSticker.setSticker(new InputFile(stickerFileId)); // –ò—Å–ø–æ–ª—å–∑—É–µ–º File ID —Å—Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ URL

        try {
            execute(sendSticker);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {}", e.getMessage());
        }
    }


    private void sendMessage(Update update, String text) {
        SendMessage message = new SendMessage();
        message.setParseMode("HTML");
        message.setChatId(update.getMessage().getChatId().toString());
        message.setText(text);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();

        row.add("/menu");
        row.add("/website");

        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);

        message.setReplyMarkup(keyboardMarkup);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }

    }


}
