name: Java CI/CD with Dockerfile

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    environment: Main

    steps:
      - uses: actions/checkout@v4

      - name: Create .env file in src/main/resources
        run: |
          mkdir -p src/main/resources  # Создаем папку, если ее нет
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> src/main/resources/.env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> src/main/resources/.env
          echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> src/main/resources/.env
          echo "SPRING_FLYWAY_ENABLED=${{ secrets.SPRING_FLYWAY_ENABLED }}" >> src/main/resources/.env
          echo "SPRING_FLYWAY_LOCATIONS=${{ secrets.SPRING_FLYWAY_LOCATIONS }}" >> src/main/resources/.env
          echo "SPRING_FLYWAY_BASELINE_ON_MIGRATE=${{ secrets.SPRING_FLYWAY_BASELINE_ON_MIGRATE }}" >> src/main/resources/.env
          echo "SPRING_FLYWAY_SCHEMAS=${{ secrets.SPRING_FLYWAY_SCHEMAS }}" >> src/main/resources/.env
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> src/main/resources/.env
          echo "JWT_ACCESS=${{ secrets.JWT_ACCESS }}" >> src/main/resources/.env
          echo "BOT_NAME=${{ secrets.BOT_NAME }}" >> src/main/resources/.env
          echo "BOT_KEY=${{ secrets.BOT_KEY }}" >> src/main/resources/.env
          echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> src/main/resources/.env
          echo "RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }}" >> src/main/resources/.env
          echo "SPRING_JPA_SHOW_SQL=${{ secrets.SPRING_JPA_SHOW_SQL }}" >> src/main/resources/.env
          echo "SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_UPDATES=${{ secrets.SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_UPDATES }}" >> src/main/resources/.env
          echo "SPRING_JPA_PROPERTIES_HIBERNATE_GENERATE_STATISTICS=${{ secrets.SPRING_JPA_PROPERTIES_HIBERNATE_GENERATE_STATISTICS }}" >> src/main/resources/.env
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> src/main/resources/.env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> src/main/resources/.env
          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> src/main/resources/.env
          echo "RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }}" >> src/main/resources/.env
          echo "ADMIN_CODE1=${{ secrets.ADMIN_CODE1 }}" >> src/main/resources/.env
          echo "ADMIN_CODE2=${{ secrets.ADMIN_CODE2 }}" >> src/main/resources/.env
          echo "RABBITMQ_QUEUES_JSON_QUEUE1_ROUTINGKEY=${{ secrets.RABBITMQ_QUEUES_JSON_QUEUE1_ROUTINGKEY }}" >> src/main/resources/.env
          echo "RABBITMQ_QUEUES_JSON_QUEUE2_ROUTINGKEY=${{ secrets.RABBITMQ_QUEUES_JSON_QUEUE2_ROUTINGKEY }}" >> src/main/resources/.env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> src/main/resources/.env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> src/main/resources/.env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> src/main/resources/.env
          echo "DISPOSABLE_ADMIN_KEY=${{ secrets.DISPOSABLE_ADMIN_KEY }}" >> src/main/resources/.env
          echo "RABBITMQ_QUEUES_JSON_QUEUE3_ROUTINGKEY=${{ secrets.RABBITMQ_QUEUES_JSON_QUEUE3_ROUTINGKEY }}" >> src/main/resources/.env
          echo "WORK_BOT_NAME=${{ secrets.WORK_BOT_NAME }}" >> src/main/resources/.env
          echo "WORK_BOT_KEY=${{ secrets.WORK_BOT_KEY }}" >> src/main/resources/.env
          echo "AWS_URL=${{ secrets.AWS_URL }}" >> src/main/resources/.env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> src/main/resources/.env

      - name: Make Gradle wrapper executable
        run: chmod +x gradlew

      - name: Build Spring Boot JAR
        run: ./gradlew clean bootJar --no-daemon

      - name: Copy JAR to remote server
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: build/libs/*.jar
          target: ${{ secrets.DEPLOY_PATH }}      # например: /opt/app/

      - name: Restart application on remote server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # stop old service if it exists
            systemctl --user stop restaurant_service.service || true
      
            # start new one as a transient systemd service
            sudo systemd-run \
              --unit=restaurant_service \
              --description="Restaurant Service" \
              --slice=app.slice \
              java -jar /java/app/build/libs/Restaurant_Service-0.0.1-SNAPSHOT.jar \
                > /var/log/Restaurant_Service-INFO.log \
                2> /var/log/Restaurant_Service-ERROR.log